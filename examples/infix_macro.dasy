;; Infix Notation Macro Demo
;;
;; This file demonstrates how to use macros to create infix notation

;; This is a simple function that adds two numbers.  It is written in
;; prefix notation, which is the default in lisp.

(defn prefix_add [:uint256 x y] :uint256 [:external :pure]
  (+ x y))

;; Define a nested-only macro using Dasy's define-syntax.
;; Pattern: (infix (x + y)) => (+ x y)

(define-syntax infix
  (syntax-rules ()
    ;; General nested pattern: capture operator symbol as `op`
    ((infix (a op b)) (op a b))))


;; Now we can write infix_add, which is more readable than
;; prefix_add to some people. The compiler will expand infix_add to
;; prefix_add, so the two functions are equivalent.
(defn infix_add [:uint256 x y] :uint256 [:external :pure]
  (infix (x + y)))
