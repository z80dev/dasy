(pragma :evm-version "cancun")
(defstruct Person
  name (string 100)
  age :uint256)

(defvars
    :public
    nums   (array :uint256 10) ;; fixed size list, must be bounded
    myMap  (hash-map :address :uint256)
    person Person)

(defn __init__ [] :external
  (doto self/nums
        (set-at 0 123) ;; this updates self.nums[0]
        (set-at 9 456)) ;; this updates self.nums[9]

  ;; copies self.nums to array in memory
  (defvar arr (array :uint256 10) self/nums)
  (set-at arr 0 123) ;; does not modify self/nums

  ;; this updates self/myMap
  (doto self/myMap
        (set-at msg/sender 1) ;; self.myMap[msg.sender] = 1
        (set-at msg/sender 11)) ;; self.myMap[msg.sender] = 11

  ;; this updates self/person
  (doto self/person
        (set-in age 11)
        (set-in name "Dasy"))

  ;; you could put defvar inside a doto like the arr example
  ;; above, but I don't think that is very readable
  ;; doing it this way is clearer, leaving the defvar out of doto
  ;; Person struct is copied into memory
  (defvar p Person self/person)
  (set-in p name "Solidity"))

(defn literalPerson [] Person :external
      (Person {:name "Foo" :age 100}))
