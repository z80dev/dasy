(defevent Transfer
  sender (indexed :address)
  receiver (indexed :address)
  value :uint256)

(defevent Approval
  owner (indexed :address)
  spender (indexed :address)
  value :uint256)

(defvars
    :public
    name (string 32)
    symbol (string 32)
    decimals :uint8
    balanceOf (hash-map :address :uint256)
    allowance (hash-map :address (hash-map :address :uint256))
    totalSupply :uint256
    minter :address)

(defn __init__ [(string 32) name symbol :uint8 decimals :uint256 supply] :external
  (defvar totalSupply :uint256 (* supply
                                  (** 10
                                      (convert decimals :uint256))))
  (set-self name symbol decimals totalSupply)
  (set-at self.balanceOf msg.sender totalSupply)
  (set self.minter msg.sender)
  (log (Transfer :sender (empty address) :receiver msg/sender :value totalSupply)))

(defn transfer [:address to :uint256 val] :bool :external
  (doto (get-at self/balanceOf msg/sender)
        (-= val))
  (doto (get-at self/balanceOf to)
        (+= val))
  (log (Transfer :sender msg/sender :receiver to :value val))
  True)

(defn transferFrom [:address _from _to :uint256 val] :bool :external
  (doto (get-at self/balanceOf _from)
        (-= val))
  (doto (get-at self/balanceOf _to)
        (+= val))
  (doto (get-at self/allowance _from msg/sender)
        (-= val))
  (log (Transfer :sender _from :receiver _to :value val))
  True)

(defn approve [:address spender :uint256 val] :bool :external
  (set-at self/allowance msg/sender spender val)
  (log (Approval :owner msg/sender :spender spender :value val))
  True)

(defn mint [:address to :uint256 val] :external
  (assert (== msg/sender self/minter))
  (assert (!= to (empty :address)))
  (+= self/totalSupply val)
  (doto (get-at self/balanceOf to)
        (+= val))
  (log (Transfer :sender (empty :address) :receiver to :value val)))

(defn _burn [:address to :uint256 val] :internal
  (assert (!= to (empty :address)))
  (-= self/totalSupply val)
  (vyper "self.balanceOf[to] -= val")
  (log (Transfer :sender to :receiver (empty :address) :value val)))

(defn burn [:uint256 val] :external
  (self/_burn msg/sender val))

(defn burnFrom [:address _from :uint256 val] :external
  (doto (get-at self/allowance _from msg/sender)
        (-= val))
  (self/_burn _from val))
